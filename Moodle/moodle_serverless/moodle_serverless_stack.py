from aws_cdk import (
    Duration,
    RemovalPolicy,
    Stack,
    aws_ecs as ecs, 
    aws_ecs_patterns as ecs_patterns, 
    aws_ec2 as ec2,
    aws_rds as rds,
    aws_efs as efs,
    aws_iam as iam,
    #aws_lambda as lambda_,
    #aws_apigateway as apigateway,
    #aws_s3 as s3,
    #aws_lambda_event_sources as event_sources,
    aws_secretsmanager as secretsmanager,
    CfnOutput as CfnOutput,
)
from constructs import Construct

class MoodleServerlessStack(Stack):

    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)

        ## VPC
        vpc = ec2.Vpc(self, "Vpc", 
            max_azs=2,   # default is all AZs in region = 3
            #nat_gateways=1
            )

        ## RDS DATABASE - mysql
        data_base = rds.DatabaseInstance(self, "moodle-db",
            vpc=vpc,
            engine=rds.DatabaseInstanceEngine.mysql(version=rds.MysqlEngineVersion.VER_8_0_30),
            database_name="moodledb",
            credentials=rds.Credentials.from_generated_secret("dbadmin", 
                exclude_characters='(" %+~`#$&*()|[]}{:;<>?!\'/^-,@_=\\'), # generate secret password for dbuser
                removal_policy=RemovalPolicy.DESTROY      # dev
            )

        # EFS elastic file system
        file_system = efs.FileSystem(self, "MoodleEfsFileSystem",
            vpc=vpc,
            lifecycle_policy=efs.LifecyclePolicy.AFTER_14_DAYS,  # files are not transitioned to infrequent access (IA) storage by default
            performance_mode=efs.PerformanceMode.GENERAL_PURPOSE,  # default
            out_of_infrequent_access_policy=efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS,
            removal_policy=RemovalPolicy.DESTROY # dev
            )

        ## EFS access point
        access_point = efs.AccessPoint(self, "MoodleEfsAccessPoint",
            file_system=file_system,
            path="/",
            create_acl=efs.Acl(
                owner_uid="0",
                owner_gid="0",
                permissions="755"
                ),
            posix_user=efs.PosixUser(
                uid="0",
                gid="0"
                )
            )

        ## Variables to pass to ECS task as environment variables
        endpointaddress = data_base.db_instance_endpoint_address
        endpointport = data_base.db_instance_endpoint_port
        
        ## Variables to pass to task as secrets
        dbpassword = ecs.Secret.from_secrets_manager(
            data_base.secret, field="password") # secret containing the password auto generated by ...from_generated_secret("moodle")
        moodlepassword = secretsmanager.Secret(self, "Moodlepassword")

        ## Task image options for Fargate Task, references bitmani/moodle docker hub image,
        ## defines the task to impliment the containers
        task_image_options=ecs_patterns.ApplicationLoadBalancedTaskImageOptions(
            image=ecs.ContainerImage.from_registry("bitnami/moodle"),
            container_name="MoodleContainer",
            container_port=8080,
            environment={
                'MOODLE_DATABASE_TYPE': 'mysqli',
                'MOODLE_DATABASE_HOST': endpointaddress,
                'MOODLE_DATABASE_PORT_NUMBER': endpointport,
                'MOODLE_DATABASE_NAME': "moodledb",
                'MOODLE_DATABASE_USER': "dbadmin",
                'MOODLE_USERNAME': 'moodleadmin',
                #'MOODLE_PASSWORD': 'nmoodle',
                #'MOODLE_EMAIL': 'hello@example.com',
                #'MOODLE_SITE_NAME': 'Scalable Moodle on ECS Fargate',
                'MOODLE_SKIP_BOOTSTRAP': 'no',
                'MOODLE_SKIP_INSTALL': 'no',
                'BITNAMI_DEBUG': 'true'},            
            secrets={"MOODLE_DATABASE_PASSWORD": dbpassword,
                    "MOODLE_PASSWORD": ecs.Secret.from_secrets_manager(moodlepassword)}
            )
        
        ## ECS container cluster for Moodle containers
        cluster = ecs.Cluster(self, "Moodle-Cluster", vpc=vpc)

        ## Fargate Service for container cluster with auto load balancer
        application = ecs_patterns.ApplicationLoadBalancedFargateService(self, 
            "moodleFargateService",
            cluster=cluster,            # Required
            cpu=2048,                    # Default is 256
            ## Desired count set to 1, can try to 2 to test.
            ## Can be increased to 2 for subsequent deployments.
            desired_count=2,            # Default is 1 suggested is 2
            min_healthy_percent=50,     # Default is 50% of desired count
            memory_limit_mib=4096,      # Default is 512
            public_load_balancer=True,  # Default is False
            assign_public_ip=True,
            task_image_options=task_image_options,
            health_check_grace_period=Duration.seconds(900), # Default is 60
            platform_version=ecs.FargatePlatformVersion.VERSION1_4, # must specify VERSION1_4 for efs to mount
            )

        ##  A volume for the containers in EFS
        volume_name = "moodleVolume"        ## referenced in mount point below
        application.task_definition.add_volume(name=volume_name,
            efs_volume_configuration=ecs.EfsVolumeConfiguration(
                file_system_id=file_system.file_system_id,
                authorization_config=ecs.AuthorizationConfig(
                    access_point_id=access_point.access_point_id,
                    iam="ENABLED"
                    ),
                transit_encryption="ENABLED"   # enable encryption for EFS data in transit
                )
            )
        
        ##  Mount point for volume
        application.task_definition.default_container.add_mount_points(
            ecs.MountPoint(
                container_path="/bitnami",
                read_only=False,
                source_volume=volume_name  # must match name string in add_volume
                )
            )

        ## Grant containers access to file system
        application.task_definition.add_to_task_role_policy(iam.PolicyStatement(actions=
                ['elasticfilesystem:ClientWrite',
                'elasticfilesystem:ClientRead'
                ],
                resources=[file_system.file_system_arn])
            )

        ## Connections - allows traffic between the default, automatically created security groups
        dbport = data_base.connections.default_port
        efsport = file_system.connections.default_port
        data_base.connections.allow_default_port_from(application.service)
        application.service.connections.allow_from(data_base, port_range=dbport)
        application.service.connections.allow_from(file_system, port_range=efsport)
        file_system.connections.allow_default_port_from(application.service)

        ## Outputs, prints output values
        CfnOutput(self, 'MOODLE-USERNAME', value='moodleadmin') 
        CfnOutput(self, 'MOODLE-PASSWORD-ARN', value=moodlepassword.secret_arn)